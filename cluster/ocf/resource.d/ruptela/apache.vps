#!/bin/bash

###
# chkconfig: 2345 99 12 
# description: Apache+pgpool VPS startup and status script
###
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

VZCTL=/usr/sbin/vzctl
VZLIST=/usr/sbin/vzlist

LOG="/var/log/ha.apache.vps.log"

apache_limit=200
TIMEOUT=3

PGPORT=5432

#TIMEOUT Utility is depricated
TIMEOUTU=/opt/serverscripts/utils/timeout
APACHET=/opt/serverscripts/zabbix/scripts/zabix_agentd/apache2.pl
REPLICATOR=/opt/serverscripts/cluster/replication/replicate_node.sh
CRONDIR=/etc/cron.replication

function debug {
	echo -e DEBUG:$(date "+%F %T"):  $1 >> $LOG
	ocf_log debug $1
}

function e {	
	 echo -e INFO:$(date "+%F %T"):  $1 >> $LOG
	 ocf_log info $1
}

function error {
	 echo -e ERROR:$(date "+%F %T"):  $1 >> $LOG
	 ocf_log err $1
}

function validate {
	#Checking vps id
	if [ -z "$OCF_RESKEY_vps" ]; then
		error "No VPS id specified"
		exit $OCF_ERR_CONFIGURED
	else
		if ! ocf_is_decimal $OCF_RESKEY_vps; then
			error "No VPS id is not numeric (${OCF_RESKEY_vps})"
                	exit $OCF_ERR_CONFIGURED
		else
			VPS=$OCF_RESKEY_vps
		fi
	fi
	#Checking utilities
	if [ ! -x $TIMEOUTU ]; then
		error "Can't find timeout utility.."
		exit $OCF_ERR_INSTALLED
	fi
	if [ ! -x $APACHET ]; then
                error "Can't find apache testing utility.."
                exit $OCF_ERR_INSTALLED
        fi
	if [ ! -x $REPLICATOR ]; then
		error "Can't find VPS replication utility.."
		exit $OCF_ERR_INSTALLED
	fi
	if [ ! -d $CRONDIR ]; then
		error "No cron directory for replication.."
		exit $OCF_ERR_INSTALLED
	fi
	
	#Checking bridge configuration
	if [ -z "$OCF_RESKEY_bridge" ]; then
		if [ ! -z "$OCF_RESKEY_bridge_default" ]; then
			debug "Using default Bridge value: ${OCF_RESKEY_bridge_default}"
			BRIDGE=$OCF_RESKEY_bridge_default}
		else
			e "No bridge specified"
		fi
	else
		debug "Using specified Bridge value: ${OCF_RESKEY_bridge}"
		BRIDGE=$OCF_RESKEY_bridge	
	fi

	#Checking timeout
	if [ -z "$OCF_RESKEY_timeout" ]; then
                if [ ! -z "$OCF_RESKEY_timeout_default" ]; then
                        debug "Using default Timeout value: ${OCF_RESKEY_timeout_default}"
                        TIMEOUT=$OCF_RESKEY_timeout_default}
                else
                        e "No Timeout specified, using script default: ${TIMEOUT}"
                fi
        else
                debug "Using specified Timeout value: ${OCF_RESKEY_timeout}"
                TIMEOUT=$OCF_RESKEY_timeout
	fi	

	#Checking apache connections limit
	if [ -z "$OCF_RESKEY_apache_limit" ]; then
                if [ ! -z "$OCF_RESKEY_apache_limit_default" ]; then
                        debug "Using default Apache connections limit value: ${OCF_RESKEY_apache_limit_default}"
                        apache_limit=$OCF_RESKEY_apache_limit_default}
                else
                        e "No Apache connections limit specified, using script specified: ${apache_limit}"
                fi
        else
                debug "Using specified Apache connections count value: ${OCF_RESKEY_apache_limit}"
                apache_limit=$OCF_RESKEY_apache_limit
        fi

	return $OCF_SUCCESS
}

#Function helpers
function apache_d {
	if [ ! -z "$1" ]; then
		CMD=$1
	else
		CMD="restart"
	fi
	
	debug "Trying to ${CMD} apache"	
	
	if [ "$CMD" == "hardrestart" ]; then
		debug "Performing killall -9 httpd"
		$VZCTL exec $VPS killall -9 httpd
		
		CMD="start"
	fi

	ST=`$VZCTL exec $VPS /etc/init.d/httpd $CMD`
	ERR=$?
	debug "Apache status: ${ST}"

	ST=`echo ${ST} | grep Starting | grep FAILED`	

	if [ $ERR -eq 0 ]; then
		if [ ! -z "$ST" ]; then
			error "Apache FAILED to ${CMD}.."
			return $OCF_ERR_PERM
		else
			e "Apache ${CMD}ed"
			return $OCF_SUCCESS
		fi
	else
		debug "Apache returned status: ${ERR}"
		error "Can not ${CMD} Apache.."
		return $OCF_ERR_PERM
	fi
}

start_replication() {

local NODES
local COUNT
local HOSTNAME
local NODEN

	e "Starting replication"
	
	#Checking which node is standby
	NODES=`crm_mon -1 | grep Online | sed -r 's/.*\[(.*)\]/\1/'`
	COUNT=`echo ${NODES} | wc -w`
	HOSTNAME=`uname -n`

	if [ ! -z "${COUNT}" ]; then
        	if [ $COUNT -ge 2 ]; then
                	for NODEN in $NODES
                	do
                        	if [ "${NODEN}" != "${HOSTNAME}" ]; then
                                	
					e "Slave node is ${NODEN}"

					e "Trying to deploy replication script"
					
					if [ ! -z "${CRONDIR}" ]; then

						cat > $CRONDIR/replicate_$VPS.cron <<EOF
#!/bin/sh
${REPLICATOR} ${VPS} ${NODEN} >> /var/log/replication_${VPS}.log 2>&1

EOF
						debug "File creted $CRONDIR/replicate_$VPS.cron"						
						debug "Chmod +x $CRONDIR/replicate_$VPS.cron"

						chmod +x $CRONDIR/replicate_$VPS.cron
						
						if [ $? -eq 0 ]; then
							e "Replication added"
						else
							error "Error occured during replication add($?)"
						fi
					else
						error "Settings error"
					fi
	
                        	fi
                	done

        	else
			error "Only one node is online ${COUNT}"
		fi
	else
		error "Can not count online nodes"
	fi


	return $OCF_SUCCESS
}

stop_replication() {
	e "Stoping replication"
	
	if [ ! -z "${CRONDIR}" ]; then	
		e "unlink ${CRONDIR}/replicate_${VPS}.cron"
		unlink ${CRONDIR}/replicate_${VPS}.cron		
		
		if [ $? -eq 0 ]; then
			e "Replication stoped"
		else
			error "Error occured during replication stop($?)"
		fi
	else
		error "Settings error"		
	fi

	return $OCF_SUCCESS
}

# VPS startup 
start() {
 	debug "Starting resource"	
	
	#validating 

	validate || exit $?
	
	if status; then
		e "Resource is running"
		return $OCF_SUCCESS
	fi
	
	debug "Running vzctl"
        $VZCTL start $VPS > /dev/null 2>&1
	ifconfig veth${VPS}.0 up
	e "Adding veth${VPS}.0 into ${BRIDGE}"
	brctl addif ${BRIDGE} veth${VPS}.0 
        e "Sleeping 20s"
	sleep 20s
	e "Starting pgpool"
	$VZCTL exec $VPS /etc/init.d/pgpool start
	 
	debug "Going to while"
	while ! status; do
        	e "Resource has not started yet, waiting"
        	sleep 1
    	done
	
	debug "Resource started"

	start_replication

        return $OCF_SUCCESS
}

# VPS stop
stop() {
	debug "Perform STOP of resource"
	
	#Validate
	validate || exit $?

	status
    	rc=$?
    	case "$rc" in
        	"$OCF_SUCCESS")
            	# Currently running. Normal, expected behavior.
            	e "Resource is currently running"
            	;;
        	"$OCF_NOT_RUNNING")
            	# Currently not running. Nothing to do.
            	e "Resource is already stopped"
            	return $OCF_SUCCESS
            	;;
    	esac

        $VZCTL stop $VPS > /dev/null 2>&1
	
	while status; do
        	e "Resource has not stopped yet, waiting"
        	sleep 1
    	done
	
	debug "Resource is stopped"
	stop_replication
	return $OCF_SUCCESS
}

# VPS status
# Checks whether apache is running and responding
# Checss whether pgpool is running and responding
 
status() {
	debug "Starting status check"
	
	#Validate
        validate || exit $?

	#Checking if VPS is running
	STATUS=`${VZLIST} ${VPS} | grep ${VPS} | awk '{print \$3}'`
	debug "Got status of vps: ${STATUS}";

	if [ $? -eq 0 ]; then
		if [ -z "${STATUS}" ] || [ "${STATUS}" != "running" ]; then
			e "VPS is not running: ${STATUS}"
			return $OCF_NOT_RUNNING
		fi
	else
		error "Failed: ${VZCTL} returned $?"
		return $OCF_ERR_PERM 
	fi
	
 	# Getting ip address of the VPS
	SIP="`${VZLIST} ${VPS} | grep ${VPS} | awk '{print \$4}'`"
	if [ -z "$SIP" ] || [ "$SIP" == "-" ]; then
		SIP="`${VZCTL} exec ${VPS} ifconfig eth0  | grep 'inet addr:'| cut -d: -f2 | awk '{ print $1}'`"
		if [ -z "$SIP" ]; then
			error "Can not determine VPS(${VPS}) IP"
			return $OCF_ERR_PERM
		fi
	fi	
	debug "Got ip of VPS: ${SIP}"

	# Checking Apache status
	STATUS="`$VZCTL exec $VPS /etc/init.d/httpd status`"
	debug "Got Apache status: ${STATUS}"
	
	if [ $? -eq 0 ]; then
        	if [ ! -z "$STATUS" ]; then

			STATUS=`echo ${STATUS} | grep running`

                	if [ -z "$STATUS" ]; then
         			error "Apache is not running..."
				#Try to start apache, if cant, return error			
				apache_d start || return $?	
								
				#return $OCF_ERR_GENERIC
                	fi
        	else
			error "Got nothing from apache"
			return $OCF_ERR_GENERIC
        	fi
	else
		error "Apache returned status: $?"
        	return $OCF_ERR_PERM 
	fi

	# Tying to connect to apache 
	active=`${APACHET} http://${SIP} 7`
	
	debug "Got apache active connections: ${active}"
 		
	if [ $? -eq 0 ]; then #Checking if script exited with 0 code
	        if [ ! -z "$active" ]; then #Checking if string is not zero
        	        if [[ -n "$active" && "$(echo "$active" | tr -c -d 1234567890)" == "$active" ]]; then #Cheking if returned value is integer

                	        if [ $active -ge $apache_limit ]; then #Checking if active connection limit is not reached
                        	       	error "Apache limit reached: $active($apache_limit)"
					#Try to hardrestart apache with kill -9
					apache_d hardrestart || return $?
					
					
                        	fi
                	else #GOT UNUSEFULL INFO
				error "Connections count is not integer: $active"
                                return $OCF_ERR_INSTALLED
                	fi
        	else #ERROR IN SCRIPT, MAY  BE NO PERMISSIONS
			error "Can not determine apache connections count"
                        return $OCF_ERR_INSTALLED
        	fi
	else #TIMEOUT? 
		error "Script returned: $?"
		
                return $OCF_ERR_GENERIC
		
	fi

	# Starting pgpool check
	PSTATUS="`$VZCTL exec $VPS /etc/init.d/pgpool status | awk '{print $3}'`"

	debug "Got pgpool status: ${PSTATUS}"

	if [ $? -eq 0 ]; then
        	if [ ! -z "$PSTATUS" ]; then
                	if [ "$PSTATUS" == "stopped" ]; then
         			error "Pgpool is not running..."
				#TODO: Try to start pgpool
				return $OCF_ERR_GENERIC
                	fi
        	else #STRANGE ERROR
			error "Got nothing from pgpool"
			#TODO: Try to restart pgpool
                	return $OCF_ERR_INSTALLED
        	fi
	else #RETURNED ERROR
		error "Pgpool returned status: $?"
        	return $OCF_ERR_PERM
	fi
	
	# Trying to connect to pgpool

	PGSTATUS="`${VZCTL} exec ${VPS} \"psql -p ${PGPORT} postgres postgres -c 'SELECT 1;'\" 2>&1`"
	
	debug "Got pgstatus: ${PGSTATUS}"
	
	if [ $? -eq 0 ]; then
		if [ -z "$PGSTATUS" ]; then #STRANGE ERROR
			error "Pgsql returned null"
			#TODO: try to restart pgpool
			return $OCF_ERR_GENERIC
		fi	
	else #TIMEOUT
		error "Can not connect to pgpool (Status: $?)..."
		#Try to restart pgpool
		return $OCF_ERR_PERM
	fi

	e "All tests success"

	return $OCF_SUCCESS
	
}
function meta() {
debug "Retrieving meta-data"
cat <<EOF
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="apache.vps" version="0.1">
  <version>0.1</version>
  <longdesc lang="en">
This is a apache VPS reource agent. This this agent you can start/stop apache VPS 
with Pgpool, also status monitoring is available
  </longdesc>
  <shortdesc lang="en">Apache VPS agent</shortdesc>
  <parameters>
    <parameter name="vps" unique="0" required="1">
      <longdesc lang="en">
      VPS id
      </longdesc>
      <shortdesc lang="en">VPS id</shortdesc>
      <content type="integer"/>
    </parameter>
    <parameter name="bridge" unique="0" required="0">
      <longdesc lang="en">
      If VPS needs to be added to the bridge configuration, specify bridge name
      </longdesc>
      <shortdesc lang="en">Bridge name</shortdesc>
      <content type="string" default="vlan77"/>
    </parameter>
    <parameter name="timeout" unique="0" required="0">
      <longdesc lang="en">
      Timeout during tests when in monitor state
      </longdesc>
      <shortdesc lang="en">Timeout on tests</shortdesc>
      <content type="integer" default="3"/>
    </parameter>
    <parameter name="apache_limit" unique="0" required="0">
      <longdesc lang="en">
      Apache connections allowed
      </longdesc>
      <shortdesc lang="en">Apache connections limit</shortdesc>
      <content type="integer" default="100"/>
    </parameter>
  </parameters>
  <actions>
    <action name="start"        timeout="20" />
    <action name="stop"         timeout="20" />
    <action name="monitor"      timeout="20"
                                interval="10" depth="0" />
    <action name="meta-data"    timeout="5" />
  </actions>
</resource-agent>
EOF
}

function usage() {
	echo $"Usage: apache.vps {start|stop|status}"
}

# See how we were called.
e "Resource APACHE.VPS"

case $__OCF_ACTION in
	meta-data)	meta
			exit $OCF_SUCCESS
			;;
	start)          start
			;;
	stop)           stop
			;;
	status|monitor) status
			;;
	*)		uage
			exit $OCF_SUCCESS
			;;
esac
rc=$?

# The resource agent may optionally log a debug message
debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION returned $rc"
exit $rc

