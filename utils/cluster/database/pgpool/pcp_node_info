#!/bin/bash

. /opt/serverscripts/utils/functions.sh

#DEBUG=1
DEFLOG="/var/log/pgpool/pcp_pool_status.log.%Y-%m-%d"

CONFIG=some.php

PGOPT="-U postgres"

DEFPOOL="localhost"
DEFNODE=1

if [ -z $1 ]; then
	NODE=$DEFNODE
else
	NODE=$1
fi
function pool_ip() {
	local ret_msg
	local ret_st
	local Q
	local PING

# Pool address determination 
	if [ -f $CONFIG ]; then
		#Trying to get pool address frm config
		debug "Trying to ger pool address"

		ret_msg=`cat $config | grep "'db' => array (" -A 5 | grep "'host'" | sed -n "s/'host'.*'\(.*\)'.*/\1/p" | tr -d ' '`
	
		debug "Pool address: $ret_msg"
	
		if [ "X$ret_msg" != "X" ]; then
			# Trying to ping 
			debug "Trying to ping host: $ret_msg"
			PING=`ping -q -n -c 2 ${ret_msg} | grep "packet loss" | cut -d " " -f 6 | cut -d "%" -f1`
			ret_st=$?

        		debug "Packet lost: ${PING}"

        		if [ $? -eq 0 ]; then
                		if [ $PING -gt 50 ]; then
                        		error "Can not ping host ${ret_msg}"
                        		exit 1
                		else
					debug "Node ${ret_msg} is good, using it"
					POOL=$ret_msg
				fi
        		else
                		error "Failed to ping, returned $ret_st"
				exit 1
                	fi
        			
		fi
	fi

	if [ -z "$DEFPOOL" ]; then
		DEFPOOL="localhost"
	fi

	if [ "X$POOL" == "X" ]; then
		POOL=$DEFPOOL
	fi
	
	PSQL="psql $PGOPT"
	
	debug "Set PSQL: $PSQL"

	#Starting check of pgpool postgres

	Q="SELECT 'ping';"

        ret_msg=`$PSQL -h $POOL -c "$Q"`
	ret_st=$?

        if [ $ret_st -ne 0 ];then
                echo "Error, postgres is not running on $POOL($ret_st): $ret_msg"
                exit 1
        fi


}
function get_pool_status() {
	local ret_msg
	local ret_st
	local Q
	local status
	local dbnode
	local ret
	local dbstatus
	
	if [ -z "$PSQL" ] || [ -z "$POOL" ]; then
		error "No PSQL string detected"
		exit 1 
	fi
	if [ -z "$NODE" ]; then
		NODE=1
	fi

	Q="SHOW pool_nodes;"
	
	ret_msg=`$PSQL -h $POOL -c "$Q" 2>&1`
	ret_st=$?

	
	if [ $ret_st -eq 0 ]; then
		debug "Returned node statuses: $ret_msg"

		ret_msg=`echo -e "$ret_msg" | grep "^ $NODE"`
		if [ ! -z "$ret_msg" ]; then
			debug "Detected string: $ret_msg"
			dbnode=`echo -e "$ret_msg" | awk '{print $3}'`
			if [ ! -z "$dbnode" ]; then
				debug "Db node detected: $dbnode"

				status=`echo -e "$ret_msg" | awk '{print $7}'`
				
				if [ ! -z "$status" ]; then
					debug "Detected node status: $status"
					ret="Node $NODE $dbnode is"
					
					if [ $status -lt 3 ]; then
					
						#Detecting node status
				        	Q="select pg_is_in_recovery()::int;"

        					dbstatus=`$PSQL -h $dbnode -t -c "$Q" 2>&1` 
						ret_st=$?
							
						if [ $ret_st -ne 0 ]; then
							error "Can not run pgsql for node $dbnode($ret_st): $dbstatus"
							exit 1
						fi
						dbstatus=`echo -e "$dbstatus"| sed '/^$/d'`

						debug "dbstatus: $dbstatus"
							
						if [ -z "$dbstatus" ]; then
							error "Dbstatus unknown"
							exit 1
						fi
	 
        					if [ $dbstatus -eq 1 ];then
         						debug "Node is standby"
							ret+=" standby"
        					else
							debug "Node is master"
							ret+=" master"
						fi

						ret+=" up($status)"
					else
						ret+=" down($status)"
					fi
		
				else
					error "Can not detect node status: $status"
					exit 1
				fi
								
			else
				error "Can not detect dbnode: $dbnode"
				exit 1
			fi
		else
			error "Can not detect $NODE"
			exit 1
		fi 
	else
		error "Show pool nodes failed($ret_st): $ret_msg"
		exit 1
	fi
		
	echo $ret
}

if pool_ip; then
	get_pool_status
fi

exit
